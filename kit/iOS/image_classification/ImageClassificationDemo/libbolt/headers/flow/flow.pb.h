// Generated by the protocol buffer compiler.
// If regenerated, please remove header prefix before using in xcode
// source: flow.proto

#ifndef PROTOBUF_flow_2eproto__INCLUDED
#define PROTOBUF_flow_2eproto__INCLUDED

#include <string>

#ifdef _USE_XCODE
#include "common.h"
#else
#include <google/protobuf/stubs/common.h>
#endif

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#ifdef _USE_XCODE
#include "arena.h"
#include "arenastring.h"
#include "generated_message_util.h"
#include "metadata.h"
#include "message.h"
#include "repeated_field.h"
#include "extension_set.h"
#include "unknown_field_set.h"
#else
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#endif
// @@protoc_insertion_point(includes)

namespace flow {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_flow_2eproto();
void protobuf_InitDefaults_flow_2eproto();
void protobuf_AssignDesc_flow_2eproto();
void protobuf_ShutdownFile_flow_2eproto();

class GraphParameter;
class NodeParameter;

// ===================================================================

class GraphParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flow.GraphParameter) */ {
 public:
  GraphParameter();
  virtual ~GraphParameter();

  GraphParameter(const GraphParameter& from);

  inline GraphParameter& operator=(const GraphParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphParameter& default_instance();

  static const GraphParameter* internal_default_instance();

  void Swap(GraphParameter* other);

  // implements Message ----------------------------------------------

  inline GraphParameter* New() const { return New(NULL); }

  GraphParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GraphParameter& from);
  void MergeFrom(const GraphParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphParameter* other);
  void UnsafeMergeFrom(const GraphParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated string input = 2;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 2;
  const ::std::string& input(int index) const;
  ::std::string* mutable_input(int index);
  void set_input(int index, const ::std::string& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  ::std::string* add_input();
  void add_input(const ::std::string& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated string output = 3;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 3;
  const ::std::string& output(int index) const;
  ::std::string* mutable_output(int index);
  void set_output(int index, const ::std::string& value);
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  ::std::string* add_output();
  void add_output(const ::std::string& value);
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output();

  // repeated .flow.NodeParameter node = 4;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 4;
  const ::flow::NodeParameter& node(int index) const;
  ::flow::NodeParameter* mutable_node(int index);
  ::flow::NodeParameter* add_node();
  ::google::protobuf::RepeatedPtrField< ::flow::NodeParameter >*
      mutable_node();
  const ::google::protobuf::RepeatedPtrField< ::flow::NodeParameter >&
      node() const;

  // @@protoc_insertion_point(class_scope:flow.GraphParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_;
  ::google::protobuf::RepeatedPtrField< ::flow::NodeParameter > node_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_InitDefaults_flow_2eproto_impl();
  friend void  protobuf_AddDesc_flow_2eproto_impl();
  friend void protobuf_AssignDesc_flow_2eproto();
  friend void protobuf_ShutdownFile_flow_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GraphParameter> GraphParameter_default_instance_;

// -------------------------------------------------------------------

class NodeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flow.NodeParameter) */ {
 public:
  NodeParameter();
  virtual ~NodeParameter();

  NodeParameter(const NodeParameter& from);

  inline NodeParameter& operator=(const NodeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeParameter& default_instance();

  static const NodeParameter* internal_default_instance();

  void Swap(NodeParameter* other);

  // implements Message ----------------------------------------------

  inline NodeParameter* New() const { return New(NULL); }

  NodeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeParameter& from);
  void MergeFrom(const NodeParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeParameter* other);
  void UnsafeMergeFrom(const NodeParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string input_type = 3;
  bool has_input_type() const;
  void clear_input_type();
  static const int kInputTypeFieldNumber = 3;
  const ::std::string& input_type() const;
  void set_input_type(const ::std::string& value);
  void set_input_type(const char* value);
  void set_input_type(const char* value, size_t size);
  ::std::string* mutable_input_type();
  ::std::string* release_input_type();
  void set_allocated_input_type(::std::string* input_type);

  // optional string input_format = 4;
  bool has_input_format() const;
  void clear_input_format();
  static const int kInputFormatFieldNumber = 4;
  const ::std::string& input_format() const;
  void set_input_format(const ::std::string& value);
  void set_input_format(const char* value);
  void set_input_format(const char* value, size_t size);
  ::std::string* mutable_input_format();
  ::std::string* release_input_format();
  void set_allocated_input_format(::std::string* input_format);

  // repeated int32 input_dim = 5;
  int input_dim_size() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 5;
  ::google::protobuf::int32 input_dim(int index) const;
  void set_input_dim(int index, ::google::protobuf::int32 value);
  void add_input_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // repeated string input = 6;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 6;
  const ::std::string& input(int index) const;
  ::std::string* mutable_input(int index);
  void set_input(int index, const ::std::string& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  ::std::string* add_input();
  void add_input(const ::std::string& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated string output = 7;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 7;
  const ::std::string& output(int index) const;
  ::std::string* mutable_output(int index);
  void set_output(int index, const ::std::string& value);
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  ::std::string* add_output();
  void add_output(const ::std::string& value);
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output();

  // optional uint32 tmp = 8 [default = 0];
  bool has_tmp() const;
  void clear_tmp();
  static const int kTmpFieldNumber = 8;
  ::google::protobuf::uint32 tmp() const;
  void set_tmp(::google::protobuf::uint32 value);

  // optional string precision = 9 [default = "FLOAT32"];
  bool has_precision() const;
  void clear_precision();
  static const int kPrecisionFieldNumber = 9;
  const ::std::string& precision() const;
  void set_precision(const ::std::string& value);
  void set_precision(const char* value);
  void set_precision(const char* value, size_t size);
  ::std::string* mutable_precision();
  ::std::string* release_precision();
  void set_allocated_precision(::std::string* precision);

  // repeated string infer_output_size_parameter = 10;
  int infer_output_size_parameter_size() const;
  void clear_infer_output_size_parameter();
  static const int kInferOutputSizeParameterFieldNumber = 10;
  const ::std::string& infer_output_size_parameter(int index) const;
  ::std::string* mutable_infer_output_size_parameter(int index);
  void set_infer_output_size_parameter(int index, const ::std::string& value);
  void set_infer_output_size_parameter(int index, const char* value);
  void set_infer_output_size_parameter(int index, const char* value, size_t size);
  ::std::string* add_infer_output_size_parameter();
  void add_infer_output_size_parameter(const ::std::string& value);
  void add_infer_output_size_parameter(const char* value);
  void add_infer_output_size_parameter(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& infer_output_size_parameter() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_infer_output_size_parameter();

  // repeated string preprocess_parameter = 11;
  int preprocess_parameter_size() const;
  void clear_preprocess_parameter();
  static const int kPreprocessParameterFieldNumber = 11;
  const ::std::string& preprocess_parameter(int index) const;
  ::std::string* mutable_preprocess_parameter(int index);
  void set_preprocess_parameter(int index, const ::std::string& value);
  void set_preprocess_parameter(int index, const char* value);
  void set_preprocess_parameter(int index, const char* value, size_t size);
  ::std::string* add_preprocess_parameter();
  void add_preprocess_parameter(const ::std::string& value);
  void add_preprocess_parameter(const char* value);
  void add_preprocess_parameter(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& preprocess_parameter() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_preprocess_parameter();

  // repeated string inference_parameter = 12;
  int inference_parameter_size() const;
  void clear_inference_parameter();
  static const int kInferenceParameterFieldNumber = 12;
  const ::std::string& inference_parameter(int index) const;
  ::std::string* mutable_inference_parameter(int index);
  void set_inference_parameter(int index, const ::std::string& value);
  void set_inference_parameter(int index, const char* value);
  void set_inference_parameter(int index, const char* value, size_t size);
  ::std::string* add_inference_parameter();
  void add_inference_parameter(const ::std::string& value);
  void add_inference_parameter(const char* value);
  void add_inference_parameter(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& inference_parameter() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_inference_parameter();

  // repeated string postprocess_parameter = 13;
  int postprocess_parameter_size() const;
  void clear_postprocess_parameter();
  static const int kPostprocessParameterFieldNumber = 13;
  const ::std::string& postprocess_parameter(int index) const;
  ::std::string* mutable_postprocess_parameter(int index);
  void set_postprocess_parameter(int index, const ::std::string& value);
  void set_postprocess_parameter(int index, const char* value);
  void set_postprocess_parameter(int index, const char* value, size_t size);
  ::std::string* add_postprocess_parameter();
  void add_postprocess_parameter(const ::std::string& value);
  void add_postprocess_parameter(const char* value);
  void add_postprocess_parameter(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& postprocess_parameter() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_postprocess_parameter();

  // @@protoc_insertion_point(class_scope:flow.NodeParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_input_type();
  inline void clear_has_input_type();
  inline void set_has_input_format();
  inline void clear_has_input_format();
  inline void set_has_tmp();
  inline void clear_has_tmp();
  inline void set_has_precision();
  inline void clear_has_precision();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_;
  ::google::protobuf::RepeatedPtrField< ::std::string> infer_output_size_parameter_;
  ::google::protobuf::RepeatedPtrField< ::std::string> preprocess_parameter_;
  ::google::protobuf::RepeatedPtrField< ::std::string> inference_parameter_;
  ::google::protobuf::RepeatedPtrField< ::std::string> postprocess_parameter_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr input_type_;
  ::google::protobuf::internal::ArenaStringPtr input_format_;
  static ::std::string* _default_precision_;
  ::google::protobuf::internal::ArenaStringPtr precision_;
  ::google::protobuf::uint32 tmp_;
  friend void  protobuf_InitDefaults_flow_2eproto_impl();
  friend void  protobuf_AddDesc_flow_2eproto_impl();
  friend void protobuf_AssignDesc_flow_2eproto();
  friend void protobuf_ShutdownFile_flow_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NodeParameter> NodeParameter_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphParameter

// optional string name = 1;
inline bool GraphParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GraphParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GraphParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GraphParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& GraphParameter::name() const {
  // @@protoc_insertion_point(field_get:flow.GraphParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flow.GraphParameter.name)
}
inline void GraphParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flow.GraphParameter.name)
}
inline void GraphParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flow.GraphParameter.name)
}
inline ::std::string* GraphParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:flow.GraphParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphParameter::release_name() {
  // @@protoc_insertion_point(field_release:flow.GraphParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flow.GraphParameter.name)
}

// repeated string input = 2;
inline int GraphParameter::input_size() const {
  return input_.size();
}
inline void GraphParameter::clear_input() {
  input_.Clear();
}
inline const ::std::string& GraphParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:flow.GraphParameter.input)
  return input_.Get(index);
}
inline ::std::string* GraphParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:flow.GraphParameter.input)
  return input_.Mutable(index);
}
inline void GraphParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flow.GraphParameter.input)
  input_.Mutable(index)->assign(value);
}
inline void GraphParameter::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.GraphParameter.input)
}
inline void GraphParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.GraphParameter.input)
}
inline ::std::string* GraphParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:flow.GraphParameter.input)
  return input_.Add();
}
inline void GraphParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.GraphParameter.input)
}
inline void GraphParameter::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.GraphParameter.input)
}
inline void GraphParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.GraphParameter.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GraphParameter::input() const {
  // @@protoc_insertion_point(field_list:flow.GraphParameter.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GraphParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:flow.GraphParameter.input)
  return &input_;
}

// repeated string output = 3;
inline int GraphParameter::output_size() const {
  return output_.size();
}
inline void GraphParameter::clear_output() {
  output_.Clear();
}
inline const ::std::string& GraphParameter::output(int index) const {
  // @@protoc_insertion_point(field_get:flow.GraphParameter.output)
  return output_.Get(index);
}
inline ::std::string* GraphParameter::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:flow.GraphParameter.output)
  return output_.Mutable(index);
}
inline void GraphParameter::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flow.GraphParameter.output)
  output_.Mutable(index)->assign(value);
}
inline void GraphParameter::set_output(int index, const char* value) {
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.GraphParameter.output)
}
inline void GraphParameter::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.GraphParameter.output)
}
inline ::std::string* GraphParameter::add_output() {
  // @@protoc_insertion_point(field_add_mutable:flow.GraphParameter.output)
  return output_.Add();
}
inline void GraphParameter::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.GraphParameter.output)
}
inline void GraphParameter::add_output(const char* value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.GraphParameter.output)
}
inline void GraphParameter::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.GraphParameter.output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GraphParameter::output() const {
  // @@protoc_insertion_point(field_list:flow.GraphParameter.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GraphParameter::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:flow.GraphParameter.output)
  return &output_;
}

// repeated .flow.NodeParameter node = 4;
inline int GraphParameter::node_size() const {
  return node_.size();
}
inline void GraphParameter::clear_node() {
  node_.Clear();
}
inline const ::flow::NodeParameter& GraphParameter::node(int index) const {
  // @@protoc_insertion_point(field_get:flow.GraphParameter.node)
  return node_.Get(index);
}
inline ::flow::NodeParameter* GraphParameter::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:flow.GraphParameter.node)
  return node_.Mutable(index);
}
inline ::flow::NodeParameter* GraphParameter::add_node() {
  // @@protoc_insertion_point(field_add:flow.GraphParameter.node)
  return node_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flow::NodeParameter >*
GraphParameter::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:flow.GraphParameter.node)
  return &node_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flow::NodeParameter >&
GraphParameter::node() const {
  // @@protoc_insertion_point(field_list:flow.GraphParameter.node)
  return node_;
}

inline const GraphParameter* GraphParameter::internal_default_instance() {
  return &GraphParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeParameter

// optional string name = 1;
inline bool NodeParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NodeParameter::name() const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flow.NodeParameter.name)
}
inline void NodeParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flow.NodeParameter.name)
}
inline void NodeParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flow.NodeParameter.name)
}
inline ::std::string* NodeParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:flow.NodeParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeParameter::release_name() {
  // @@protoc_insertion_point(field_release:flow.NodeParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flow.NodeParameter.name)
}

// optional string type = 2;
inline bool NodeParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& NodeParameter::type() const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flow.NodeParameter.type)
}
inline void NodeParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flow.NodeParameter.type)
}
inline void NodeParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flow.NodeParameter.type)
}
inline ::std::string* NodeParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:flow.NodeParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeParameter::release_type() {
  // @@protoc_insertion_point(field_release:flow.NodeParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:flow.NodeParameter.type)
}

// optional string input_type = 3;
inline bool NodeParameter::has_input_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeParameter::set_has_input_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeParameter::clear_has_input_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeParameter::clear_input_type() {
  input_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_type();
}
inline const ::std::string& NodeParameter::input_type() const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.input_type)
  return input_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeParameter::set_input_type(const ::std::string& value) {
  set_has_input_type();
  input_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flow.NodeParameter.input_type)
}
inline void NodeParameter::set_input_type(const char* value) {
  set_has_input_type();
  input_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flow.NodeParameter.input_type)
}
inline void NodeParameter::set_input_type(const char* value, size_t size) {
  set_has_input_type();
  input_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flow.NodeParameter.input_type)
}
inline ::std::string* NodeParameter::mutable_input_type() {
  set_has_input_type();
  // @@protoc_insertion_point(field_mutable:flow.NodeParameter.input_type)
  return input_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeParameter::release_input_type() {
  // @@protoc_insertion_point(field_release:flow.NodeParameter.input_type)
  clear_has_input_type();
  return input_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeParameter::set_allocated_input_type(::std::string* input_type) {
  if (input_type != NULL) {
    set_has_input_type();
  } else {
    clear_has_input_type();
  }
  input_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_type);
  // @@protoc_insertion_point(field_set_allocated:flow.NodeParameter.input_type)
}

// optional string input_format = 4;
inline bool NodeParameter::has_input_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeParameter::set_has_input_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeParameter::clear_has_input_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeParameter::clear_input_format() {
  input_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_format();
}
inline const ::std::string& NodeParameter::input_format() const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.input_format)
  return input_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeParameter::set_input_format(const ::std::string& value) {
  set_has_input_format();
  input_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flow.NodeParameter.input_format)
}
inline void NodeParameter::set_input_format(const char* value) {
  set_has_input_format();
  input_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flow.NodeParameter.input_format)
}
inline void NodeParameter::set_input_format(const char* value, size_t size) {
  set_has_input_format();
  input_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flow.NodeParameter.input_format)
}
inline ::std::string* NodeParameter::mutable_input_format() {
  set_has_input_format();
  // @@protoc_insertion_point(field_mutable:flow.NodeParameter.input_format)
  return input_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeParameter::release_input_format() {
  // @@protoc_insertion_point(field_release:flow.NodeParameter.input_format)
  clear_has_input_format();
  return input_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeParameter::set_allocated_input_format(::std::string* input_format) {
  if (input_format != NULL) {
    set_has_input_format();
  } else {
    clear_has_input_format();
  }
  input_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_format);
  // @@protoc_insertion_point(field_set_allocated:flow.NodeParameter.input_format)
}

// repeated int32 input_dim = 5;
inline int NodeParameter::input_dim_size() const {
  return input_dim_.size();
}
inline void NodeParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 NodeParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.input_dim)
  return input_dim_.Get(index);
}
inline void NodeParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:flow.NodeParameter.input_dim)
}
inline void NodeParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:flow.NodeParameter.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NodeParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:flow.NodeParameter.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NodeParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:flow.NodeParameter.input_dim)
  return &input_dim_;
}

// repeated string input = 6;
inline int NodeParameter::input_size() const {
  return input_.size();
}
inline void NodeParameter::clear_input() {
  input_.Clear();
}
inline const ::std::string& NodeParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.input)
  return input_.Get(index);
}
inline ::std::string* NodeParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:flow.NodeParameter.input)
  return input_.Mutable(index);
}
inline void NodeParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flow.NodeParameter.input)
  input_.Mutable(index)->assign(value);
}
inline void NodeParameter::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.NodeParameter.input)
}
inline void NodeParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.NodeParameter.input)
}
inline ::std::string* NodeParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:flow.NodeParameter.input)
  return input_.Add();
}
inline void NodeParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.NodeParameter.input)
}
inline void NodeParameter::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.NodeParameter.input)
}
inline void NodeParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.NodeParameter.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParameter::input() const {
  // @@protoc_insertion_point(field_list:flow.NodeParameter.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:flow.NodeParameter.input)
  return &input_;
}

// repeated string output = 7;
inline int NodeParameter::output_size() const {
  return output_.size();
}
inline void NodeParameter::clear_output() {
  output_.Clear();
}
inline const ::std::string& NodeParameter::output(int index) const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.output)
  return output_.Get(index);
}
inline ::std::string* NodeParameter::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:flow.NodeParameter.output)
  return output_.Mutable(index);
}
inline void NodeParameter::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flow.NodeParameter.output)
  output_.Mutable(index)->assign(value);
}
inline void NodeParameter::set_output(int index, const char* value) {
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.NodeParameter.output)
}
inline void NodeParameter::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.NodeParameter.output)
}
inline ::std::string* NodeParameter::add_output() {
  // @@protoc_insertion_point(field_add_mutable:flow.NodeParameter.output)
  return output_.Add();
}
inline void NodeParameter::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.NodeParameter.output)
}
inline void NodeParameter::add_output(const char* value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.NodeParameter.output)
}
inline void NodeParameter::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.NodeParameter.output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParameter::output() const {
  // @@protoc_insertion_point(field_list:flow.NodeParameter.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParameter::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:flow.NodeParameter.output)
  return &output_;
}

// optional uint32 tmp = 8 [default = 0];
inline bool NodeParameter::has_tmp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NodeParameter::set_has_tmp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NodeParameter::clear_has_tmp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NodeParameter::clear_tmp() {
  tmp_ = 0u;
  clear_has_tmp();
}
inline ::google::protobuf::uint32 NodeParameter::tmp() const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.tmp)
  return tmp_;
}
inline void NodeParameter::set_tmp(::google::protobuf::uint32 value) {
  set_has_tmp();
  tmp_ = value;
  // @@protoc_insertion_point(field_set:flow.NodeParameter.tmp)
}

// optional string precision = 9 [default = "FLOAT32"];
inline bool NodeParameter::has_precision() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NodeParameter::set_has_precision() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NodeParameter::clear_has_precision() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NodeParameter::clear_precision() {
  precision_.ClearToDefaultNoArena(_default_precision_);
  clear_has_precision();
}
inline const ::std::string& NodeParameter::precision() const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.precision)
  return precision_.GetNoArena(_default_precision_);
}
inline void NodeParameter::set_precision(const ::std::string& value) {
  set_has_precision();
  precision_.SetNoArena(_default_precision_, value);
  // @@protoc_insertion_point(field_set:flow.NodeParameter.precision)
}
inline void NodeParameter::set_precision(const char* value) {
  set_has_precision();
  precision_.SetNoArena(_default_precision_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flow.NodeParameter.precision)
}
inline void NodeParameter::set_precision(const char* value, size_t size) {
  set_has_precision();
  precision_.SetNoArena(_default_precision_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flow.NodeParameter.precision)
}
inline ::std::string* NodeParameter::mutable_precision() {
  set_has_precision();
  // @@protoc_insertion_point(field_mutable:flow.NodeParameter.precision)
  return precision_.MutableNoArena(_default_precision_);
}
inline ::std::string* NodeParameter::release_precision() {
  // @@protoc_insertion_point(field_release:flow.NodeParameter.precision)
  clear_has_precision();
  return precision_.ReleaseNoArena(_default_precision_);
}
inline void NodeParameter::set_allocated_precision(::std::string* precision) {
  if (precision != NULL) {
    set_has_precision();
  } else {
    clear_has_precision();
  }
  precision_.SetAllocatedNoArena(_default_precision_, precision);
  // @@protoc_insertion_point(field_set_allocated:flow.NodeParameter.precision)
}

// repeated string infer_output_size_parameter = 10;
inline int NodeParameter::infer_output_size_parameter_size() const {
  return infer_output_size_parameter_.size();
}
inline void NodeParameter::clear_infer_output_size_parameter() {
  infer_output_size_parameter_.Clear();
}
inline const ::std::string& NodeParameter::infer_output_size_parameter(int index) const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.infer_output_size_parameter)
  return infer_output_size_parameter_.Get(index);
}
inline ::std::string* NodeParameter::mutable_infer_output_size_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:flow.NodeParameter.infer_output_size_parameter)
  return infer_output_size_parameter_.Mutable(index);
}
inline void NodeParameter::set_infer_output_size_parameter(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flow.NodeParameter.infer_output_size_parameter)
  infer_output_size_parameter_.Mutable(index)->assign(value);
}
inline void NodeParameter::set_infer_output_size_parameter(int index, const char* value) {
  infer_output_size_parameter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.NodeParameter.infer_output_size_parameter)
}
inline void NodeParameter::set_infer_output_size_parameter(int index, const char* value, size_t size) {
  infer_output_size_parameter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.NodeParameter.infer_output_size_parameter)
}
inline ::std::string* NodeParameter::add_infer_output_size_parameter() {
  // @@protoc_insertion_point(field_add_mutable:flow.NodeParameter.infer_output_size_parameter)
  return infer_output_size_parameter_.Add();
}
inline void NodeParameter::add_infer_output_size_parameter(const ::std::string& value) {
  infer_output_size_parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.NodeParameter.infer_output_size_parameter)
}
inline void NodeParameter::add_infer_output_size_parameter(const char* value) {
  infer_output_size_parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.NodeParameter.infer_output_size_parameter)
}
inline void NodeParameter::add_infer_output_size_parameter(const char* value, size_t size) {
  infer_output_size_parameter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.NodeParameter.infer_output_size_parameter)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParameter::infer_output_size_parameter() const {
  // @@protoc_insertion_point(field_list:flow.NodeParameter.infer_output_size_parameter)
  return infer_output_size_parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParameter::mutable_infer_output_size_parameter() {
  // @@protoc_insertion_point(field_mutable_list:flow.NodeParameter.infer_output_size_parameter)
  return &infer_output_size_parameter_;
}

// repeated string preprocess_parameter = 11;
inline int NodeParameter::preprocess_parameter_size() const {
  return preprocess_parameter_.size();
}
inline void NodeParameter::clear_preprocess_parameter() {
  preprocess_parameter_.Clear();
}
inline const ::std::string& NodeParameter::preprocess_parameter(int index) const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.preprocess_parameter)
  return preprocess_parameter_.Get(index);
}
inline ::std::string* NodeParameter::mutable_preprocess_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:flow.NodeParameter.preprocess_parameter)
  return preprocess_parameter_.Mutable(index);
}
inline void NodeParameter::set_preprocess_parameter(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flow.NodeParameter.preprocess_parameter)
  preprocess_parameter_.Mutable(index)->assign(value);
}
inline void NodeParameter::set_preprocess_parameter(int index, const char* value) {
  preprocess_parameter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.NodeParameter.preprocess_parameter)
}
inline void NodeParameter::set_preprocess_parameter(int index, const char* value, size_t size) {
  preprocess_parameter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.NodeParameter.preprocess_parameter)
}
inline ::std::string* NodeParameter::add_preprocess_parameter() {
  // @@protoc_insertion_point(field_add_mutable:flow.NodeParameter.preprocess_parameter)
  return preprocess_parameter_.Add();
}
inline void NodeParameter::add_preprocess_parameter(const ::std::string& value) {
  preprocess_parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.NodeParameter.preprocess_parameter)
}
inline void NodeParameter::add_preprocess_parameter(const char* value) {
  preprocess_parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.NodeParameter.preprocess_parameter)
}
inline void NodeParameter::add_preprocess_parameter(const char* value, size_t size) {
  preprocess_parameter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.NodeParameter.preprocess_parameter)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParameter::preprocess_parameter() const {
  // @@protoc_insertion_point(field_list:flow.NodeParameter.preprocess_parameter)
  return preprocess_parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParameter::mutable_preprocess_parameter() {
  // @@protoc_insertion_point(field_mutable_list:flow.NodeParameter.preprocess_parameter)
  return &preprocess_parameter_;
}

// repeated string inference_parameter = 12;
inline int NodeParameter::inference_parameter_size() const {
  return inference_parameter_.size();
}
inline void NodeParameter::clear_inference_parameter() {
  inference_parameter_.Clear();
}
inline const ::std::string& NodeParameter::inference_parameter(int index) const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.inference_parameter)
  return inference_parameter_.Get(index);
}
inline ::std::string* NodeParameter::mutable_inference_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:flow.NodeParameter.inference_parameter)
  return inference_parameter_.Mutable(index);
}
inline void NodeParameter::set_inference_parameter(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flow.NodeParameter.inference_parameter)
  inference_parameter_.Mutable(index)->assign(value);
}
inline void NodeParameter::set_inference_parameter(int index, const char* value) {
  inference_parameter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.NodeParameter.inference_parameter)
}
inline void NodeParameter::set_inference_parameter(int index, const char* value, size_t size) {
  inference_parameter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.NodeParameter.inference_parameter)
}
inline ::std::string* NodeParameter::add_inference_parameter() {
  // @@protoc_insertion_point(field_add_mutable:flow.NodeParameter.inference_parameter)
  return inference_parameter_.Add();
}
inline void NodeParameter::add_inference_parameter(const ::std::string& value) {
  inference_parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.NodeParameter.inference_parameter)
}
inline void NodeParameter::add_inference_parameter(const char* value) {
  inference_parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.NodeParameter.inference_parameter)
}
inline void NodeParameter::add_inference_parameter(const char* value, size_t size) {
  inference_parameter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.NodeParameter.inference_parameter)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParameter::inference_parameter() const {
  // @@protoc_insertion_point(field_list:flow.NodeParameter.inference_parameter)
  return inference_parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParameter::mutable_inference_parameter() {
  // @@protoc_insertion_point(field_mutable_list:flow.NodeParameter.inference_parameter)
  return &inference_parameter_;
}

// repeated string postprocess_parameter = 13;
inline int NodeParameter::postprocess_parameter_size() const {
  return postprocess_parameter_.size();
}
inline void NodeParameter::clear_postprocess_parameter() {
  postprocess_parameter_.Clear();
}
inline const ::std::string& NodeParameter::postprocess_parameter(int index) const {
  // @@protoc_insertion_point(field_get:flow.NodeParameter.postprocess_parameter)
  return postprocess_parameter_.Get(index);
}
inline ::std::string* NodeParameter::mutable_postprocess_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:flow.NodeParameter.postprocess_parameter)
  return postprocess_parameter_.Mutable(index);
}
inline void NodeParameter::set_postprocess_parameter(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flow.NodeParameter.postprocess_parameter)
  postprocess_parameter_.Mutable(index)->assign(value);
}
inline void NodeParameter::set_postprocess_parameter(int index, const char* value) {
  postprocess_parameter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.NodeParameter.postprocess_parameter)
}
inline void NodeParameter::set_postprocess_parameter(int index, const char* value, size_t size) {
  postprocess_parameter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.NodeParameter.postprocess_parameter)
}
inline ::std::string* NodeParameter::add_postprocess_parameter() {
  // @@protoc_insertion_point(field_add_mutable:flow.NodeParameter.postprocess_parameter)
  return postprocess_parameter_.Add();
}
inline void NodeParameter::add_postprocess_parameter(const ::std::string& value) {
  postprocess_parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.NodeParameter.postprocess_parameter)
}
inline void NodeParameter::add_postprocess_parameter(const char* value) {
  postprocess_parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.NodeParameter.postprocess_parameter)
}
inline void NodeParameter::add_postprocess_parameter(const char* value, size_t size) {
  postprocess_parameter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.NodeParameter.postprocess_parameter)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParameter::postprocess_parameter() const {
  // @@protoc_insertion_point(field_list:flow.NodeParameter.postprocess_parameter)
  return postprocess_parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParameter::mutable_postprocess_parameter() {
  // @@protoc_insertion_point(field_mutable_list:flow.NodeParameter.postprocess_parameter)
  return &postprocess_parameter_;
}

inline const NodeParameter* NodeParameter::internal_default_instance() {
  return &NodeParameter_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace flow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flow_2eproto__INCLUDED
